services:
  # Redis for Celery background tasks
  redis:
    image: redis:7-alpine
    container_name: hilabs-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - hilabs-network
    restart: unless-stopped


  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:8000
    depends_on:
      - backend
    networks:
      - hilabs-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=sqlite:////app/data/contracts.db
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - backend_data:/app/data
      - worker_uploads:/app/upload
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - hilabs-network
    restart: unless-stopped

  worker:
    build:
      context: .
      dockerfile: worker/Dockerfile
    environment:
      - DATABASE_URL=sqlite:////app/data/contracts.db
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      # Optimize worker performance
      - CELERY_WORKER_CONCURRENCY=2
      - CELERY_WORKER_PREFETCH_MULTIPLIER=1
      - CELERY_WORKER_MAX_TASKS_PER_CHILD=50
    volumes:
      - backend_data:/app/data
      - worker_uploads:/app/upload
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - hilabs-network
    restart: unless-stopped

volumes:
  redis_data:
  worker_uploads:
  backend_data:

networks:
  hilabs-network:
    driver: bridge
